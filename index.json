[{"authors":["admin"],"categories":null,"content":"I\u0026rsquo;m a graduate student working with Uri Shalit at the Technion. I develop machine learning algorithms for causal inference from observational data, like medical records. I\u0026rsquo;m also interested in physiological signal processing (ECG, EEG, fMRI) and extracting insights from learned representations in neural networks. I completed a BSc in Electrical Engineering at the Technion. I\u0026rsquo;m an amateur sourdough baker and handtool woodworker.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://tom-beer.github.io/author/tom-beer/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/tom-beer/","section":"authors","summary":"I\u0026rsquo;m a graduate student working with Uri Shalit at the Technion. I develop machine learning algorithms for causal inference from observational data, like medical records. I\u0026rsquo;m also interested in physiological signal processing (ECG, EEG, fMRI) and extracting insights from learned representations in neural networks.","tags":null,"title":"Tom Beer","type":"authors"},{"authors":["Tom Beer","Bar Eini-Porat","Sebastian Goodfellow","Danny Eytan","Uri Shalit"],"categories":[],"content":"","date":1598468077,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598468077,"objectID":"8db09040d6d4212d3fbc3cad69d21316","permalink":"https://tom-beer.github.io/publication/discovery/","publishdate":"2020-08-26T21:54:37+03:00","relpermalink":"/publication/discovery/","section":"publication","summary":"Deep neural networks (DNN) have shown remarkable success in the classification of physiological signals. In this study we propose a method for examining to what extent does a DNN's performance rely on rediscovering existing features of the signals, as opposed to discovering genuinely new features. Moreover, we offer a novel method of removing a hand-engineered feature from the network's hypothesis space, thus forcing it to try and learn representations which are different from known ones, as a method of scientific exploration. We then build on existing work in the field of interpretability, specifically class activation maps, to try and infer what new features the network has learned. We demonstrate this approach using ECG and EEG signals. With respect to ECG signals we show that for the specific task of classifying atrial fibrillation, DNNs are likely rediscovering known features. We also show how our method could be used to discover new features, by selectively removing some ECG features and rediscovering them. We further examine how could our method be used as a tool for examining scientific hypotheses. We simulate this scenario by looking into the importance of eye movements in classifying sleep from EEG. We show that our tool can successfully focus a researcher's attention by bringing to light patterns in the data that would be hidden otherwise.","tags":[],"title":"Using Deep Networks for Scientific Discovery in Physiological Signals","type":"publication"},{"authors":[],"categories":[],"content":"This post will summarize the main points in our recent work - Using Deep Networks for Scientific Discovery in Physiological Signals, which will be was presented at the 2020 Machine Learning for Healthcare Conference. Code for the framework and experiments can be found here.\n Motivation Despite the tremendous breakthroughs that deep learning models have brought in the last decade, they remain largely undeployed in high stakes domains like healthcare. Clinicians do not trust the outputs of complex black box models, and prefer to work with simple, interpretable systems that base their decisions on theoretically grounded and understood features.\nFor example, in the case of cardiac abnormality detection from ECG signals, practitioners are likely to trust a simple decision tree that uses features they understand like variance of the heartbeat interval series, energy content in different parts of the signal etc.; They likely won\u0026rsquo;t trust a classifier that bases its decisions on deep representations. See this very good survey on what clinicians want.\nBut it\u0026rsquo;s exactly the super efficient representation extraction capabilities that make deep learning models so special. End to end models trained in hours exceed or compare to performance of systems that are based on decades-long research and engineering of useful features. In uncharted areas (for example if a new sensing modality would be invented), deep learning models would prove useful from day zero.\nWhat if we could extract interpretable, clinically sound features from the neural network\u0026rsquo;s latent representation, to be used in simple machine learning models? Then these models would be easily deployed in healthcare and other high stakes domains. This is the main motivation for our work.\n Main idea To do that, we need two things:\n A way to understand which aspect of the signal the latent representation captures and focuses on. We use class activations maps (CAMs) for this aim. A way to make the network remove a feature from the latent representation\u0026rsquo;s hypothesis space. We solve this by modifying the network\u0026rsquo;s architechture and loss function: concatenating the external feature to the latent representation layer, and imposing statistical independence between the two.  The reason we need a mechanism to unlearn a predefined feature from the network\u0026rsquo;s representation is that we imagine an iterative discovery process. At first, no domain knowledge is available, and so we can learn the task without constraints, using some visualization scheme (like CAMs) to derive a first set of useful, interpretable features. Next, we would like to extract only the residual information - what is not encoded in the first set of features. To do this we need a notion of independence, or orthogonality, between two representations. Only when the network\u0026rsquo;s representation is independent from the already known features could we hope to discover a new feature set. This process goes on and on, until no more information is extracted from the network.\n Method Achieving this goal can be broken down into 3 steps: Building the constrained representation, ensuring its validity (that it\u0026rsquo;s indeed independent, for example) and visualizing the activations to extract features.\nConstruction of the constrained representation We assume we have access to a set of $n$ samples of the form $(x_1,f_1,y_1), \u0026hellip; , (x_n,f_n,y_n)$, where: $x_i$ are raw signals, for example ECG signals; the vectors $f_i$ are hand-engineered features, calculated as a deterministic function of $x_i$, and typically of much lower dimension than $x_i$; and, $y_i \\in [1,\\ldots,k]$ are discrete labels.\nThe main goal of the architecture and loss function proposed below are to learn DNN features (denoted $g_i$) which are on the one hand informative about the labels $y_i$, but on the other hand contain as little information as possible about the hand engineered features $f_i$. This is achieved by combining two elements: a term added to the objective function which encourages statistical independence between the $f_i$ and $g_i$, and an architecture which encourages $g_i$ to be non-redundant with respect to $f_i$.\nIndependence measure\nThe measure chosen to enforce independence between the hand-engineered features $f_i$ and the DNN\u0026rsquo;s representation $g_i$ is the Hilbert-Schmidt Independence Criterion (HSIC), which is based on the eigenspectrum of covariance operators in reproducing kernel Hilbert spaces.\nThere are various other measures of statistical independence; the advantage of HSIC is that it is non-parametric, unlike mutual information, and so it is fit for samples not following a prescribed distributional form. In addition, it does not require training an additional model (i.e. an inference network for variational approximation or an adversarial network).\nHSIC can be thought of as a non-linear extension of the cross-covariance between two random variables. Unlike the cross-covariance, the HSIC between two random variables $X$ and $Y$ equals $0$ if and only if $X$ is independent of $Y$ (under certain regularity conditions).\n More on HSIC This HSIC loss is calculated in the following manner. For $\\mathcal{F, G}$ RKHSs with universal kernels $k$, $l$ we compute the kernel matrices $K_{ij} = k(f_i,f_j)$ and $L_{ij} = l(g_i,g_j)$. Both $k$ and $l$ were selected to be Gaussian kernels: $$ K_{i,j} = e^{\\frac{{|| f_i-f_j ||}^2_2}{\\sigma^2}} $$ With $L_{i,j}$ computed in a similar manner. Then the scaled Hilbert-Schmidt norm of their cross covariance matrix is calculated: $$ \\widehat{HSIC}(\\{(f_i,g_j\\}^n_{i=1}; \\mathcal{F, G} ) = \\frac{1}{(n-1)^2} \\cdot \\textbf{tr}(KHLH) $$ where $H_{ij}=\\delta_{i,j}-\\frac{1}{n}$ is a centering matrix.   Setting the bandwidth $\\sigma$\nFor each kernel matrix, the bandwidth $\\sigma$ is set to be the median pairwise distance of the data points, a heuristic described here. Since $f$ is a fixed representation space, its median pairwise distance can be computed once before training. However $g$ changes every training step, so its bandwidth is updated accordingly at every training step based on a moving average between the current median pairwise distance and the previously set bandwidth.\nConcatentation\nThe hand-engineered features $f$ are usually highly predictive for the selected task. In order to further encourage the DNN latent representation $g$ to be distinct from $f$, the two representations are concatenated before passing them on to the final layer of the network. This is done to prevent, as much as possible, from the network representation $g$ to try and replicate $f$, even when under the HSIC constraint. We have found that it is not possible to achieve both reasonable classification accuracy on the original task and sufficient independence from the external representation without this concatenation step.\nLoss function\nThe loss function of the network\u0026rsquo;s output is given by: $$ \\lambda \\text{HSIC}\\left([f_1,\\ldots f_n];[g_1,\\ldots,g_n]\\right) + \\sum_{i=1}^n \\text{CrossEntropy}\\left(\\hat{y}_i,y_i\\right), $$ where $\\lambda$ is a hyperparameter controlling the degree of independence induced between the DNN representation $g_i$ and the hand-engineered representations $f_i$. This parameter is tuned to ensure both high performance on the original task and sufficient independence relative to the external features.\nSchematic view\nIf that sounded complicated, maybe a diagram would clear things up: This concludes what we refer to as the main task.\nValidation of the representation So, we trained a neural network and validated that it yields a reasonable classification accuracy, but what guarantees do we have that (1) the network has succeeded in achieving true independence between the hand-engineered features and internal network representation while (2) retaining some information about the label within the DNN representation? We define two auxiliary tasks whose aim is to boost our confidence in the claims made in the main task\nIndependence\nThe HSIC term in our loss function is meant to induce statistical independence between the hand-engineered features $f$ and the DNN features $g$. We validate that this is indeed achieved by checking whether one can predict the features $f$ when given the features $g$ as input. We do this by training a multi-task DNN whose input is $g$ and output labels are the entries of $f$. We then measure the held-out squared correlation $R^2$, averaged across the dimensions of $f$. An average $R^2$ value close to 0 indicates a high degree of independence. As a further reference point, this value is compared to the $R^2$ value obtained using an network with the same architecture as ours but without the HSIC term (equivalent to setting $\\lambda$ = 0), which we call the baseline model\nResidual Information\nTo confirm that the obtained representation $g$ holds useful information for the task in question, we run the following evaluation: Our method is trained on a sample set $train_1$ . Then we apply the representation function $g$ to a separate sample set $train_2$. We fit a vanilla 3-layer network, which we call Rep2Label, predicting $y$ from $g$ on the training set $train_2$. Finally, we evaluate the accuracy of Rep2Label on a held-out test set. An accuracy greater then chance indicates that the latent representation still holds valuable information about the label and can be analyzed for our goal of scientific discovery.\nFeature discovery through visualization The third and final step in the proposed framework is to visualize the network\u0026rsquo;s activations over different aspects of the input signals using CAMs. CAMs are a technique for visualizing spatially localized class-relevant information. They are obtained by a simple matrix multiplication between a CNN’s activations (before global average pooling) and the weights of the fully connected layer.\nFor a physiological signal the output of CAM is, for each sample, a time series showing what parts of the signal produce strong activations per a given class. We (1) align these activation profiles around a meaningful physiological landmark, e.g. an R-peak in ECG signals or a rapid eye movement in EEG signals, (2) normalize the activation profiles to [0, 1], and (3) average them over the entire test set. When the mere existence of an event is significant, we would expect CAM peak over the event start. This high activation over the event’s start is interpreted as importance for the task.\n Some results This approach is demonstrated for two types of signals and tasks: Atrial fibrillation detection in ECG signals and REM detection in EEG signals. Both these tasks were very well studied in the medical literature over the last decades, so we do not aim to discover anything new here. Instead, we aim to discover the already known domain knowledge. Because discovery is a qualitative notion and we do not have any quantitative measures of success, it was important to select example tasks that could serve as benchmarks for our approach.\nThe full results are in the paper, including details about the experimental setup. Here I will focus on one type of result from the ECG use case. Data and task\nThe dataset used for this experiment is from the 2017 PhysioNet Challenge.\nThe original challenge\u0026rsquo;s task was to classify single-lead ECGs to the following categories: Normal, atrial fibrillation (AF), other and noisy. We modified the task to be a binary classification: detection of AF.\nExternal features\nWhen clinicians diagnose AF from ECGs, they focus on 2 types of signal properties:\n Properties of the RR interval sequence. In cases of AF, the heartbeats are irregularly spaced. Hand-engineered features that capture this behavior include median, STD, RMS, multiscale entropy, minimum and maximum of the RR sequence. Properties of the P-waves. P-waves are the first positive deflection in a normal heartbeat. In AF, the P-wave may not exist at each beat. Hand-engineered features that characterize this part of the signal include the maximum, STD and energy of the amplitude of the time windows where the P-Wave should appear.  The model was trained 4 times: With no features (baseline), with the RR features, with the P-wave features and with all features together. After ensuring that the models have passed the validation tests, the following mean activations were extracted.\nRR constrained model: P-wave constrained model: For the RR model (whose representation is encouraged not to use R-peak related information), we observe an almost smooth activation with a clear peak which starts around 300ms before the R-peak and ends around 100ms before the R-peak. That is, The RR model’s activation peak has an almost perfect overlap with the expected location of the P-wave window. In addition, in the P-Wave model’s activation (i.e a model that is pushed to not use P-wave-based features), it seems that the activation shifted toward the R-peak starting point. As one of the hallmark features of AF is the loss of regularity of the intervals between consecutive R-peaks, an increase in activation at the expected location of the R-peak seems to reflect the shift of the internal representation.\n Discussion This work shows a proof of concept for the discovery of interpretable features by imposing constraints on neural representations. There are some limitations, including:\n The proposed framework is relevant mostly to local, morphological features due to the nature of the class activation maps. The real challenge of feature discovery is not nearly solved by this approach. A domain expert needs to translate the activation templates and come up with interpretable functions or scientific understanding that capture the exposed pattern.  ","date":1595351622,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595351622,"objectID":"4c2c0b55fec5f2dc41cde76dc8c1ecef","permalink":"https://tom-beer.github.io/post/deep-scientific-discovery/","publishdate":"2020-07-21T20:13:42+03:00","relpermalink":"/post/deep-scientific-discovery/","section":"post","summary":"Summary of the MLHC paper","tags":[],"title":"Deep Networks for Scientific Discovery","type":"post"},{"authors":[],"categories":[],"content":" This post was generated from a Jupyter notebook; it can be found here\n Motivation Suppose we want to estimate the causal effect of:\n An anti smoking taxation program in California on cigarette consumption  or\n The German reunification on West Germany’s economy  or\n Right to carry laws on violent crimes in Texas  or\n Uber and Lyft on traffic congestion in Paris  What would be a sensible approach to answer these questions? For practitioners coming from domains like healthcare, advertisement or collaborative filtering, these questions do not seem to fit in their everyday way of thinking. The reason is that for these questions, we are interested in the effect of an intervention for a single unit, while we do not have any data about this intervention for other units.\nTake the German reunification as an example - it is only Germany that was reunified, and the task is to infer the causal effect of that historic event. As for the other examples - sure, California was not the first to implement an anti-smoking program, and Uber is active in many cities over the globe apart from Paris. But the task considered here is to use only the intervention data for the unit in question.\n The qualitative approach It seems insensible to make inferences on a single unit - what credibility could we attain? What would be the statistical properties of the estimator?\nBut for decades, qualitative analyses that seem unsensible were carried out by economists and social scientists. They would meticulously find relevant controls for the relevant treated unit, relying on informal statements of affinity between the units. Then, with a chosen control unit, identification schemes like difference-in-differences would be applied.\nThis approach has some merit - the resulting estimator is interpretable, transparent and simple. It is easy to communicate it and argue about the choice of control units. Yet it\u0026rsquo;s clear that it is not the optimal approach, at least for practitioners of the quantitative / statistical learning schools. So the question is - can we do better? Can we devise a data-driven approach for causal effect estimation of aggregate interventions? Can we phrase a clear objective for the estimator?\n Synthetic Controls Introduced in 2003 and formalized in 2010 by Alberto Abadie and colleagues, the synthetic control aims to bridge between the traditional qualitative approaches of the social sciences and the modern data driven approaches. It strikes a balance between the two by offering a clear objective function to optimize while constraining the model to remain transparent, interpretable and simple. It is applicable to almost any domain, and became very popular thanks to its lenient assumptions. Esteemed economists Susan Athey and Guido Imbens have called it \u0026ldquo;arguably the most important innovation in the policy evaluation literature in the last 15 years\u0026rdquo;. Sounds interesting? Let\u0026rsquo;s dive in.\n The main idea The qualitative approach calls for a manual selection of control units from a pool of potential control units. The main idea of the synthetic control method is to forgo any kind of manual control selection. Instead, the method makes use of all the control units in a data-driven approach. The controls are weighted based on their similarity to the treated unit, yielding the synthetic control as a weighed combination of the original units.\n Potential outcomes - click here for details We can formalize the main idea above in the language of potential outcomes:  For the control units, we observe the potential outcome under no-intervention For the treated unit, we observe its potential outcome under no-intervention in the pre-intervention period, and its potential outcome under the intervention in the post-intervention period To calculate the causal effect, we need the treated unit\u0026rsquo;s potential outcome under no-intervention in the post-intervention period The synthetic control emulates this potential outcome. It attempts to answer the question of \u0026ldquo;What would have been the outcome for the treated unit, without the intervention?\u0026rdquo;   We see that the task of causal effect estimation boils down to finding the optimal weighting of the control units. And how shall one find the optimal weights? This is the point where the road forks - there are many suggestions for phrasing of the optimization problem, each with its own pros and cons. The next section will describe one possibility, which is the originally proposed apparoch by Abadie et al; A discussion of its limitations in face of more contemporary approaches will follow. But first - some (minimal) notation.\n The setting  We have data for $T$ time periods, $T_0$ of them are pre-intervention and $T_1$ belong to the post-intervention period We have $J$ control units, $j\\in{1,..,n}$, and one treated unit ($j=0$) The measured outcomes for each unit and time period is $Y_{jt} \\in \\mathbb{R}^{T \\times J+1}$ The synthetic control is defined as $\\sum_{j=1}^{J} Y_{jt} \\cdot W_j$ The causal effect estimate is thus $\\tau_t = Y_{0t} - \\sum_{j=1}^{J} Y_{jt} \\cdot W_j$ In addition, for some methods we require a set of $K$ outcome predictors for each unit: $X_{kj}\\in \\mathbb{R}^{K \\times J+1}$. These may be lagged outcomes (pre-intervention) or other auxiliary features (or both)   ADH\u0026rsquo;s synthetic control Proposed by Abadie, Diamond and Hainmueller (hence the name) in this paper, this is the seminal proposal for policy evaluation using synthetic controls. Apart from introducing the main idea above, they present the following objective function:\n$$W^* \\in argmin_{W \\in {\\Delta}^{J}} \\lVert \\mathbf{X_0-X_{\\neg0} \\cdot W} \\rVert $$\nSome remarks:\n  The similarity between the controls and the treated units is measured with respect to the features $X$, while the synthetic control is constructed using the outcomes $Y$. It might seem more sensible to perform the matching with respect the outcome from the start. After all, we are interested in a good pre-treatment fit for the outcome, and the best fit would be obtained using the outcome and not a proxy for it. Indeed, recent works claim that \u0026ldquo;covariates are of less relevance in applications; outcomes tend to be substantially more important than covariates in terms of predictive power\u0026rdquo; ( see here)\n  The weights are constrained to lie in the J-simplex, i.e. they should be non-negative and sum to one. The authors impose this constraint to avoid extrapolation and increase the method\u0026rsquo;s transparency. But like the previous point, here too recent studies recommend to remove this constraint, stating that it is not obvious that restricting the weights this way is optimal ( see here). From a different angle, this constraint could be seen as weight regularization, for example this work shows an equivalence between the simplex constraint and LASSO regularization with a fixed coefficient. The question that arises is - why use a fixed-strength regularization, instead of using LASSO with cross-validation?\n  These are valid and thoughtful concerns. I think it would be best to take the main idea of the synthetic control method, but to experiment with the implementation details for each use case.\n An example use case Estimating the effect of California’s tobacco control program This section will demonstrate the described method on a specific use case. The case of California\u0026rsquo;s tobacco control program was one of the first applications of the synthetic control method, and it was introduced in this paper. I will recover all steps: data processing, feature extraction, synthetic control construction and causal effect estimation - exactly as shown in the paper and described above (no modifications at all to the original method). If something wasn\u0026rsquo;t clear above - hopefully this example will clarify things up.\nThe research question In 1988 California implemented a large scale tobacco control program, called proposition 99, that increased California’s cigarette excise tax by 25 cents per pack, earmarked the tax revenues to health and anti-smoking education budgets, funded anti-smoking media campaigns, and spurred local clean indoor-air ordinances throughout the state. The question we are interested here it to evaluate the policy\u0026rsquo;s effect in terms of per-capita cigarette consumption. The potential controls in this case are all US states (that\u0026rsquo;s an RAS).\nData  The main outcome is annual per-capita cigarette consumption. The data for this can be found here. In addition to the main outcome, we will utilize some features that correlate with it (GDP, ages, beer consumption etc). This data is taken from here.  df_outcome_raw = pd.read_csv('prop99.csv') df_outcome_raw = df_outcome_raw[df_outcome_raw['SubMeasureDesc'] == 'Cigarette Consumption (Pack Sales Per Capita)'] df_outcome = pd.DataFrame(df_outcome_raw.pivot_table(values='Data_Value', index='LocationDesc', columns=['Year']).to_records()) rda_predictors = pyreadr.read_r('smoking.rda') df_predictors = pd.DataFrame(list(rda_predictors.values())[0]) print(f'The original dataset contains {df_outcome.LocationDesc.unique().shape[0]} states')  The original dataset contains 51 states  As part of the method\u0026rsquo;s assumptions and requirements, it is important to exclude from the donor pool (this is how the collection of control units is traditionally called) any unit that may not be a true control - i.e. any unit that has implemented a similar intervention. In our case, some states also introduced anti-smoking programs or substantially increased the tax for cigarettes:\nbad_states = ['Massachusetts', 'Arizona', 'Oregon', 'Florida', 'Alaska', 'Hawaii', 'Maryland', 'Michigan', 'New Jersey', 'New York', 'Washington', 'District of Columbia'] df_outcome.drop(df_outcome[df_outcome['LocationDesc'].isin(bad_states)].index, inplace=True) ca_id = df_outcome[df_outcome['LocationDesc'] == 'California'].index.item() df_outcome = df_outcome.reset_index() df_outcome = df_outcome.rename(columns={'index': 'org_index'}) print(f'After filtering out some states, we are left with {df_outcome.LocationDesc.unique().shape[0]} states (including California):') df_outcome.head()  After filtering out some states, we are left with 39 states (including California):   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  org_index LocationDesc 1970 1971 1972 1973 1974 1975 1976 1977 ... 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014     0 0 Alabama 89.8 95.4 101.1 102.9 108.2 111.7 116.2 117.1 ... 82.4 83.3 80.2 78.0 75.6 71.5 68.4 67.2 64.6 61.7   1 3 Arkansas 100.3 104.1 103.9 108.0 109.7 114.8 119.1 122.6 ... 82.1 81.4 78.4 77.0 72.6 63.2 61.1 60.5 57.5 54.4   2 4 California 123.0 121.0 123.5 124.4 126.7 127.1 128.0 126.4 ... 33.1 32.9 31.8 30.3 28.8 26.3 26.0 25.2 23.9 22.7   3 5 Colorado 124.8 125.5 134.3 137.9 132.8 131.0 134.2 132.0 ... 57.9 53.1 51.1 48.4 46.0 41.4 40.6 40.6 38.3 36.7   4 6 Connecticut 120.0 117.6 110.8 109.3 112.4 110.2 113.4 117.3 ... 49.9 50.9 50.5 47.4 45.9 40.8 36.3 33.5 31.4 30.1    5 rows × 47 columns\n Let\u0026rsquo;s construct the matrices defined above:\ndf_outcome_ca = df_outcome.loc[df_outcome['LocationDesc'] == 'California', :] df_outcome_control = df_outcome.loc[df_outcome['LocationDesc'] != 'California', :] ca_outcomes_pre = df_outcome_ca.loc[:,[str(i) for i in list(range(START_TIME, INTERVENTION_TIME))]].values.reshape(-1,1) control_outcomes_pre = df_outcome_control.loc[:,[str(i) for i in list(range(START_TIME, INTERVENTION_TIME))]].values.transpose() ca_outcomes_post = df_outcome_ca.loc[:,[str(i) for i in list(range(INTERVENTION_TIME, STOP_TIME))]].values.reshape(-1,1) control_outcomes_post = df_outcome_control.loc[:,[str(i) for i in list(range(INTERVENTION_TIME, STOP_TIME))]].values.transpose()  If we plot the outcomes for California vs. an average of all US states, we see that the \u0026lsquo;average control state\u0026rsquo; is not like California in the pre-intervention period, violating the parallel trends assumption required to draw inferences. Therefore we will find an optimal weighting that would attain a good fit to California in the pre-intervention period.\nmean_outcomes = np.vstack([control_outcomes_pre, control_outcomes_post]).mean(axis=1) CA_outcomes = np.vstack([ca_outcomes_pre, ca_outcomes_post]).flatten() fig = plt.figure(figsize=(7.5,4.5)) plt.plot(range(START_TIME,STOP_TIME),mean_outcomes, 'r--', label=\u0026quot;rest of the U.S.\u0026quot;); plt.plot(range(START_TIME,STOP_TIME),CA_outcomes, 'b-', label=\u0026quot;California\u0026quot;); plt.ylabel('per-capita cigarette sales (in packs)') plt.xlabel('year') plt.legend(loc='upper right') plt.title(\u0026quot;Figure 1: Trends in per-capita cigarette sales: California vs. the rest of the United States\u0026quot;) plt.axvline(INTERVENTION_TIME) plt.text(x=INTERVENTION_TIME+0.2, y=30, s='Passage of Proposition 99') plt.xlim([START_TIME, STOP_TIME-1]) plt.ylim([0, 150]) plt.grid() plt.show()  Now let\u0026rsquo;s extract the covariates used in the paper.\n Note that some of the boilerplate code has been rendered out of the html file, but it can be found in the original notebook here\n control_predictors = [] for state in df_outcome['LocationDesc'].unique(): state_predictor_vec = extract_predictor_vec(state) if state == 'California': ca_predictors = state_predictor_vec else: control_predictors += [state_predictor_vec] control_predictors = np.hstack(control_predictors)  Construction of synthetic control And here is how we optimize the objective function.\nNote that in the original paper, the authors suggested to add feature importance weights $V$ to be tuned simultaneously with the control weights $W$. I am not convinced that these are required, especially if all features are scaled properly. But in order to reproduce the same results as in the paper, these importance weights are tuned here too. Without them, the optimization would have been a single line of least squares..\ndef w_mse(w, v, x0, x1): return mean_squared_error(x1, x0.dot(w), sample_weight=v) def w_constraint(w, v, x0, x1): return np.sum(w) - 1 def v_constraint(V, W, X0, X1, Z0, Z1): return np.sum(V) - 1 def fun_w(w, v, x0, x1): return fmin_slsqp(w_mse, w, bounds=[(0.0, 1.0)]*len(w), f_eqcons=w_constraint, args=(v, x0, x1), disp=False, full_output=True)[0] def fun_v(v, w, x0, x1, z0, z1): return mean_squared_error(z1, z0.dot(fun_w(w, v, x0, x1))) def solve_synthetic_control(X0, X1, Z0, Z1, Y0): k,j = X0.shape V0 = 1/k*np.ones(k) W0 = 1/j*np.zeros(j).transpose() V = fmin_slsqp(fun_v, V0, args=(W0, X0, X1, Z0, Z1), bounds=[(0.0, 1.0)]*len(V0), disp=True, f_eqcons=v_constraint, acc=1e-6) W = fun_w(W0, V, X0, X1) return V, W V, W = solve_synthetic_control(control_predictors, ca_predictors, control_outcomes_pre, ca_outcomes_pre, control_outcomes_post)  Optimization terminated successfully (Exit mode 0) Current function value: 23.45850495358178 Iterations: 5 Function evaluations: 8 Gradient evaluations: 1  The optimization terminated successfully, but we need to examine the obtained fit with respect to the features. The values for the \u0026lsquo;average state\u0026rsquo; are shown for reference.\nmean_predictors = X0.mean(axis=1) print(\u0026quot;Table 1: Cigarette sales predictor means \\n\u0026quot;) display(pd.DataFrame(np.hstack([X1, X0.dot(W).reshape(-1,1), mean_predictors.reshape(-1,1)]), columns=['Real California', 'Synthetic California', 'Average of 38 Controls']))  Table 1: Cigarette sales predictor means   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  Real California Synthetic California Average of 38 Controls     0 10.076559 10.076559 10.076559   1 17.353238 17.353238 17.353238   2 89.422223 89.422223 89.422223   3 24.280000 24.280000 24.280000   4 90.100000 90.099950 113.823684   5 120.200000 120.200020 138.089474   6 127.100000 127.100214 136.931579     Seems perfect.\nWe can inspect which of the states contributed most to the synthetic control construction. These states are interpreted to be similar to California. And because of the simplex constraint, the solution is sparse - there are just a few states with non-negative weights.\nlargest_weights = list(df_outcome['LocationDesc'].values[1+np.flip(W.argsort())][:5]) print(', '.join(largest_weights))  Utah, North Carolina, North Dakota, Montana, New Hampshire  Now Let\u0026rsquo;s construct and examine the obtained synthetic control:\nSC_outcomes = np.vstack([Z0, Y0]).dot(W) CA_outcomes = np.vstack([Z1, Y1]).flatten() fig = plt.figure(figsize=(7.5,4.5)) plt.plot(range(START_TIME,STOP_TIME),SC_outcomes, 'r--', label=\u0026quot;Synthetic California\u0026quot;); plt.plot(range(START_TIME,STOP_TIME),CA_outcomes, 'b-', label=\u0026quot;California\u0026quot;); plt.ylabel('per-capita cigarette sales (in packs)') plt.xlabel('year') plt.legend(loc='upper right') plt.title(\u0026quot;Figure 2: Trends in per-capita cigarette sales: California vs. synthetic California\u0026quot;) plt.axvline(INTERVENTION_TIME) plt.text(x=INTERVENTION_TIME+0.2, y=30, s='Passage of Proposition 99') plt.xlim([START_TIME, STOP_TIME-1]) plt.ylim([0, 140]) plt.grid() plt.show()  The pre-intervention fit is reasonable, so we can move on with confidence to calculate the causal effect. This is as simple as subtracting the two lines:\nGap_outcome = np.vstack([Z0, Y0]).dot(W) - np.vstack([Z1, Y1]).flatten() fig = plt.figure(figsize=(7.5,4.5)) plt.plot(range(START_TIME,STOP_TIME),Gap_outcome, 'r--'); plt.ylabel('gap in per-capita cigarette sales (in packs)') plt.xlabel('year') plt.title(\u0026quot;Figure 3: Per-capita cigarette sales gap between California and synthetic California\u0026quot;) plt.axhline(0) plt.axvline(INTERVENTION_TIME) plt.text(x=INTERVENTION_TIME-9.5, y=30, s='Passage of Proposition 99') plt.xlim([START_TIME, STOP_TIME-1]) plt.ylim([35, -35]) plt.grid() plt.show()  With this plot, we can carefully conclude that the implementation of proposition 99 has caused a per-capita reduction of around 26 packs of cigarettes each year. Not bad!\nSummary This post introduced the synthetic control method for policy evaluation and demonstrated its use on a famous example. I think this is a very interesting and fun topic that does not receive the attention it deserves. It is widely applicable and requires minimal and reasonable assumptions. The next post will go through another example that has not been addressed yet - what is the effect of Haifa\u0026rsquo;s newly introduced low emission zone (LEZ)? Stay tuned!\n","date":1594239270,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594239270,"objectID":"de21c525f49efad8c4449175e591cdc4","permalink":"https://tom-beer.github.io/post/synthetic-control/","publishdate":"2020-07-08T23:14:30+03:00","relpermalink":"/post/synthetic-control/","section":"post","summary":"With application to California's anti-smoking program","tags":[],"title":"The Synthetic Control Method","type":"post"},{"authors":[],"categories":[],"content":"As part of a project evaluating the effect of Haifa\u0026rsquo;s low emission zone (LEZ) using the synthetic control method (coming soon!), I ran a short exploration of the data. It\u0026rsquo;s always beneficial to have a thorough look at the data before starting to model it. I think it\u0026rsquo;s safe to say that any investment of time in exploratory data analysis will be returned at a later stage in terms of better modelling insights, less bugs and valid conclusions.\nDisclaimer: I have no expertise in air quality analysis, in fact this is the first time I look at data collected from an air pollution monitoring system.\n This post was generated from a Jupyter notebook, which can be downloaded from here.\n The notebook goes through the following steps:\n Dataset cleaning and tidying Handling of missing values Analyzing trends of time series (daily, weekly, annual etc) Finding correlations between pairs of variables Data fusion with meteorological dataset  At a later stage, these sections will be added:\n Simple air pollution modelling Validation of the inference conducted for the ministry regarding the effect of Haifa\u0026rsquo;s LEZ.  Dataset sources  Air quality monitoring data was downloaded from the website of Israel\u0026rsquo;s Ministry of Environmental Protection. The interface can be found here. Temperature data was downloaded from Israel Meteorological Service\u0026rsquo;s website. The interface can be found here.  The raw data looks like this:\ndf_aqm = pd.read_csv('Data/Haifa-Atzmaut.csv') df_aqm   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  תחנה:עצמאות חיפה - SO2 Benzene PM2.5 PM10 CO NO2 NOX NO תאריך \\ שעה     0  ppb ppb µg/m³ µg/m³ ppm ppb ppb ppb    1    29.7 44.4 0.6 41.2 114.8 73.8 31/12/2011 24:00   2    30.6 45.5 0.6 35.6 81.1 45.6 01/01/2012 00:05   3    30.6 45.5 0.5 40.7 107.9 67.0 01/01/2012 00:10   4    30.2 45.1 0.5 41.7 127.9 86.2 01/01/2012 00:15   ... ... ... ... ... ... ... ... ... ... ...   883289  23/04/2020 02:15 31/03/2014 22:00 02/03/2014 17:00 07/02/2012 14:30 06/01/2020 13:40 18/01/2017 13:05 22/01/2015 07:30 22/01/2015 07:30 תאריך מקסימלי   883290  1.7 0.24 19.8 49.7 0.4 20.8 42.6 21.8 Avg   883291  237295 602180 800202 97432 844796 827176 826981 826945 כמות ערכים   883292  27 68 91 11 96 94 94 94 נתון[%]   883293  2.8 0.3 17.8 50.0 0.2 16.3 58.6 46.0 סטיית תקן    883294 rows × 10 columns\n Dataset Cleaning The following steps are needed to clean the dataset:\n Delete the first column, which contains only the station\u0026rsquo;s name Strip the column names of leading and trailing whitespaces Translate the Hebrew date/time column Replace the representation of midnight from 24:00 to 00:00 to comply with Python\u0026rsquo;s DateTime Drop the first row, which contains the units of measurements for the variables Drop the last 8 rows, which contain summary statistics Numerify the measurements, setting missing values to NaN Set the datetime variable as index  station_name = df_aqm.columns[0] df_aqm.drop(columns=[station_name], inplace=True) df_aqm.rename(columns={colname: colname.strip() for colname in df_aqm.columns}, inplace=True) df_aqm.rename(columns={df_aqm.columns[-1]: 'DateTime'}, inplace=True) df_aqm['DateTime'] = df_aqm['DateTime'].apply(lambda x: x.strip().replace('24:00', '00:00')) pollutants = list(df_aqm) pollutants.remove('DateTime') units = {colname: df_aqm.loc[0, colname].strip() for colname in pollutants} df_aqm = df_aqm.iloc[1:-8] df_aqm[pollutants] = df_aqm[pollutants].apply(pd.to_numeric, errors='coerce') df_aqm['DateTime'] = pd.to_datetime(df_aqm['DateTime'],infer_datetime_format=True) df_aqm = df_aqm.set_index('DateTime') print(f'The dataset spans {len(np.unique(df_aqm.index.date))} days,' f'from {df_aqm.index[0].date()} to {df_aqm.index[-1].date()}')  The dataset spans 3068 days,from 2011-12-31 to 2020-05-24  Let\u0026rsquo;s have a look at a 2-month slice of the cleaned dataset:\ndf_aqm.loc[\u0026quot;2018-04\u0026quot;:\u0026quot;2018-05\u0026quot;]   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  SO2 Benzene PM2.5 PM10 CO NO2 NOX NO   DateTime             2018-04-01 00:05:00 1.8 0.18 7.4 NaN 0.3 22.2 23.6 1.4   2018-04-01 00:10:00 2.0 0.18 9.5 NaN 0.3 26.3 27.9 1.5   2018-04-01 00:15:00 NaN 0.18 13.7 NaN 0.3 24.6 25.2 0.5   2018-04-01 00:20:00 NaN 0.18 16.8 NaN 0.3 25.0 25.9 0.9   2018-04-01 00:25:00 NaN 0.18 17.4 NaN 0.4 24.2 24.7 0.6   ... ... ... ... ... ... ... ... ...   2018-05-31 23:40:00 0.0 0.08 8.0 NaN 0.3 7.2 7.5 0.5   2018-05-31 23:45:00 0.0 0.08 7.5 NaN 0.3 6.7 7.1 0.2   2018-05-31 23:50:00 0.0 0.08 6.4 NaN 0.3 10.2 11.2 1.2   2018-05-31 23:55:00 0.0 0.08 6.6 NaN 0.3 9.1 10.1 1.0   2018-05-31 00:00:00 0.0 0.08 9.8 NaN 0.3 7.7 7.4 0.0    17568 rows × 8 columns\n Not bad! Nice and tidy.\nSome notes about the data\n Measurements are recorded at 5-minute intervals. That\u0026rsquo;s a very high resolution, much more than needed to answer the research question. But it\u0026rsquo;ll be very helpful - it will allow for aggressive smoothing of the noisy measurements. In total, we have almost 1 million measurements of each pollutant. From the slice above we can suspect that the measurement resolution for CO (Carbon Monoxide) might be small compared to its distribution. It\u0026rsquo;s easy to check:  df_aqm['CO'].value_counts(normalize=True).head(7)  0.3 0.338305 0.2 0.186482 0.4 0.182812 0.5 0.073091 0.1 0.051982 0.6 0.039140 0.0 0.035468 Name: CO, dtype: float64  And indeed more than 70% of the CO measurements fall in one of 3 distinct values. This implies that the CO measurement is not accurate enough in capturing this pollutant\u0026rsquo;s distribution. We should keep that in mind when drawing inferences based on CO.\nMoving on to a general overview of the data, let\u0026rsquo;s use the convenient \u0026lsquo;describe\u0026rsquo; method:\ndf_aqm.describe()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  SO2 Benzene PM2.5 PM10 CO NO2 NOX NO     count 237295.000000 602180.000000 800202.000000 97432.000000 844796.000000 827176.000000 826981.000000 826945.000000   mean 1.718825 0.242009 19.774215 49.704957 0.366657 20.821325 42.579953 21.816400   std 2.763984 0.300786 17.774355 49.961126 0.249257 16.310098 58.644492 46.070798   min -0.800000 -0.010000 -29.500000 -10.100000 -0.400000 -4.800000 -4.600000 -5.000000   25% 0.100000 0.060000 10.800000 24.000000 0.200000 7.700000 8.500000 0.300000   50% 0.800000 0.150000 17.200000 37.500000 0.300000 15.400000 19.300000 3.300000   75% 2.400000 0.320000 25.400000 59.400000 0.400000 31.900000 51.300000 18.400000   max 136.200000 12.700000 562.000000 810.900000 23.400000 262.400000 865.500000 763.800000     We can immediately notice negative measurements for all pollutants. This is not a good sign, because while this can be easily addressed and fixed, it increases our suspicion of more serious problems in the dataset that would be difficult to identify.\nBut that will be addressed later. Now we have to solve the issue of negative measurements. Let\u0026rsquo;s first understand the extent of the problem:\npercent_negative = 100*(df_aqm[pollutants] \u0026lt; 0).mean(axis=0).values print(f'{pollutants[percent_negative.argmax()]} has {percent_negative.max():.1f}% negative values')  NO has 8.8% negative values  That\u0026rsquo;s quite bad. Two of the simplest ways to fix this issue are:\n Clip the negative values to 0 Replace them with NaNs  However, these two approaches may or may not be the best thing to do, depending on:\n The mechanism that has caused this issue The quality of data required to answer the research question  Since I don\u0026rsquo;t have a substantiated answer to any of these questions, I tried to find out what domain practitioners recommend on doing. Here is a thread with some opinions and insights on the matter. The authors propose to differentiate between two situations, and act accordingly:\n If the datapoints exhibit sudden short drops below 0, this probably indicates an instrument malfunction. In this case, it is advised to replace the invalid value with an average of some neighborhood. If consecutive values below 0 are recorded for long times compared to the instrument\u0026rsquo;s integration time, this is probably rooted in the true air conditions. In this case, negative values imply that the real value was below the instrument\u0026rsquo;s detection limit. The suggested approach would be to replace the negative values with the known detection limit, or 0 if it isn\u0026rsquo;t known (like in our case). More justifications for this approach can be found in Polissar et al, 1998  If we want to follow these guidelines, we need to decide for each negative measurement if it the former case or the latter. This will be coded at a later stage.\nChecking for systematic data collection flaws It is important to make sure that our dataset does not have any systematic flaws in the data collection process. For example, later we would like to demonstrate the fluctuations of pollutants as function of the weekday. In this case, if some days are recorded significantly less often than other days, any conclusion we would like to state as for the weekday trend might be invalidated.\nAn easy way to check this is to print the value counts of the weekdays:\ndf_aqm['Weekday Name'] = df_aqm.index.day_name() df_aqm['Weekday Name'].value_counts()  Sunday 126420 Saturday 126145 Friday 126144 Monday 126144 Wednesday 126144 Thursday 126144 Tuesday 126144 Name: Weekday Name, dtype: int64  We see that the dataset is pretty much balanced in terms of weekday logging, and that is reassuring. However, it could also be that the logging system simply adds an entry for every 5-minute interval, while the measurement instruments malfunction with some systematic (i.e not at random) pattern. A complete examination would be:\ndf_aqm[pollutants].isna().groupby(df_aqm['Weekday Name']).mean()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  SO2 Benzene PM2.5 PM10 CO NO2 NOX NO   Weekday Name             Friday 0.731030 0.271008 0.100235 0.892718 0.040160 0.061295 0.061430 0.061430   Monday 0.731204 0.394097 0.094646 0.887097 0.046114 0.067835 0.068121 0.068398   Saturday 0.730992 0.344128 0.100820 0.894621 0.043846 0.064632 0.064767 0.064767   Sunday 0.734813 0.313724 0.100791 0.884710 0.046757 0.060141 0.060354 0.060354   Thursday 0.728350 0.297026 0.093805 0.892662 0.043442 0.062254 0.062571 0.062579   Tuesday 0.733376 0.305429 0.084047 0.886312 0.043363 0.069159 0.069413 0.069413   Wednesday 0.729674 0.302345 0.084071 0.889745 0.041334 0.059353 0.059559 0.059559     We see that the fraction of missing data changes significantly from one pollutant to another. In addition, for each pollutant, the fraction of missing values changes per weekday, but for now it\u0026rsquo;s hard to say if these differences are consequential. Meanwhile, it\u0026rsquo;s good to keep this table in mind, and we might return to it depending on the analysis and inference that we would like to conduct.\nSo we can conclude this step with the reassurance that the data does not exhibit major systematic data collection flaws, and we can move on in to the analysis. Let\u0026rsquo;s plot the data in its most raw form - just a scatterplot of every datapoint:\naxes=df_aqm[pollutants].plot(marker='.', alpha=0.5, linestyle='None', figsize=(11, 11), subplots=True, colormap='Dark2');  We can notice a few things from this plot:\n PM10 and SO2 are not continuously monitored along the 8 year period. Plots and analyses in the following will not ignore them, as we can still draw some conclusions using these limited measurements We can see the first hint of a seasonal trend: it seems like NOx and NO follow an annual trend. Because of the scatterplot\u0026rsquo;s density it could also be that only a few outliers paint a picture that looks like an annual trend, while in reality they do not contribute a significant amount to the total trend. Therefore a more detailed analysis is required to validate this claim It seems like NO2 and NOx are identical (or almost identical measurements). Reading about NOx it seems rather amusing, as NOx is defined as the sum the nitrogen oxides NO and NO2. But it is the visualization that is misleading, and a closer look reveals that NOx is always higher than NO2.  Let\u0026rsquo;s see if on average there is a real annual trend for some substances:\nlog_interval = 5 # minutes samples_per_week = int(60 / log_interval * 24 * 7) window = samples_per_week*4 overlap = int(2*samples_per_week) df_aqm.rolling( window=window, center=False, min_periods=samples_per_week).mean()[samples_per_week*2::overlap].plot( marker='.', alpha=0.5, linestyle='None', figsize=(11, 11), subplots=True, colormap='Dark2');  This plot shows rolling averages of the measurements, with windows of 4 weeks and an overlap of 2 weeks. A similar result could be obtained using a simple groupby with a monthly frequency:\ndf_aqm.groupby(pd.Grouper(freq='M')).mean()\nBut the overlapping windows add a degree of smoothing which is (arguably) preferable in this case.\nIf you are disappointed too with pandas\u0026rsquo; lack of an overlap parameter in the rolling function, you can contribute to the discussion here.\nAnyway, enough with the ranting. The above plot shows that all nitrogen oxide measurements (and also benzene to a lesser extent) follow a clear annual trend peaking at winter. It is still not clear what\u0026rsquo;s the cause of this modulation, and we will revisit it later in the analysis.\nThe same trends could be demonstrated using a different visualization, plotting the 8 year daily averages of every pollutants.\ndf_aqm.groupby(df_aqm.index.dayofyear).mean().plot(marker='.', alpha=0.5, linestyle='None', figsize=(11, 11), subplots=True, colormap='Dark2'); plt.xlabel('Day of the Year');  The annual trend of NO, NO2, NOx and benzene is validated through this plot. In addition, we can notice a peculiar drop in CO values around day 240. A closer look reveals that this drop is at day 243. This day is August 31st, the last day of summer vacation for 1.5 million kids. Coincidence? I don\u0026rsquo;t know. What do you think?\nLet\u0026rsquo;s move now to a weekly analysis:\nax = sns.boxplot(data=df_aqm, x='Weekday Name', y='NOX', order=['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], palette=sns.cubehelix_palette(7, start=.5, rot=-.75, dark=0.3, reverse=True)).set_ylim([0,70]);  For NOx, there is a clear weekly trend in the amount of air pollution measured. Note that the outliers have been cropped out of the plot. For other pollutants, the trend is not as impressive:\nax = sns.boxplot(data=df_aqm, x='Weekday Name', y='CO', order=['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], palette=sns.cubehelix_palette(7, start=.5, rot=-.75, dark=0.3, reverse=True)).set_ylim([0,1]);  And we also see the discrete nature of the CO measurements, as noted earlier. Another way to look at the weekly flactations would be to plot the raw measurements for a specific period of time:\ndf_sub = df_aqm.loc['2019-07':'2019-09'] fig, ax = plt.subplots(figsize=(20,5)) ax.plot(df_sub.groupby(df_sub.index.date).median()['NOX'], marker='o', linestyle='-') ax.set_ylabel('NOx [ppb]') ax.set_title('') ax.xaxis.set_major_locator(mdates.WeekdayLocator(byweekday=mdates.SATURDAY)) ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %d'));  For this 3-month period, the lowest measured values were always on Saturdays, agreeing with the boxplot above.\nThe third and last seasonal trend to be analyzed is the dependence on the hour of the day.\ndf_aqm.groupby(df_aqm.index.time).mean().plot(marker='.', alpha=0.5, linestyle='None', figsize=(11, 11), subplots=True, colormap='Dark2'); plt.xticks([\u0026quot;08:00\u0026quot;,\u0026quot;12:00\u0026quot;, \u0026quot;16:00\u0026quot;, \u0026quot;20:00\u0026quot;, \u0026quot;00:00\u0026quot;, \u0026quot;04:00\u0026quot;]);  Some notes about this plot:\n Most pollutants peak in the morning. Some right at the rush hour (NO, NO2, NOX, Benzene) and some a bit later (SO2, PM10) It doesn\u0026rsquo;t seem like PM2.5 adheres to any logical pattern. CO peaks around midnight. It seems as it has a slow buildup process, followed by a slow decreasing phase. If nitrogen oxides are caused mainly by transportation, then the rush hour attribution above could make sense. In this case, we could also attribute the slow increase and plateau in the afternoon/evening to the fact (or assumption?) that commute back home is spread on longer hours, compared to the narrow rush hour. I\u0026rsquo;m no expert on the sources of each pollutant, be it transportation, industry, the port or natural factors. So I don\u0026rsquo;t know if any of these hypotheses make any sort of sense.  Air pollution and temperatures The above trends show a clear correlation between the season/month and the average measured pollutants (at least for nitrogen oxides and benzene). But what is the cause of this modulation - is it the time itself? Or maybe it is the temperature? There could be many potential causes, and estimating each of these effects is a difficult problem, according to the identification strategies of causal inference. Instead, we can choose to stay in the realm of mere correlations, and while they do not imply causation, we could speculate what is a reasonable claim and what is not.\nA simple examination would be to evaluate how much of this modulation is governed by the change in temperature (disregarding the day of the year). To this end, I downloaded a second dataset, this time from Israeli Meteorological Service. It includes daily measurements (low and high temperatures) from the meteorological station closest to the air quality monitoring station, situated at BAZAN Group\u0026rsquo;s plant in Haifa.\nA straightforward cleaning yields a dataset that looks like this:\ndf_temp = pd.read_csv('Data/ims_data.csv', sep=\u0026quot;,\u0026quot;, encoding=\u0026quot;ISO-8859-8\u0026quot;) # translate df from Hebrew df_temp = df_temp.rename(columns={'משתנה': 'variable', 'תאריך': 'DateTime', 'חיפה בתי זיקוק (600)': 'value'}) df_temp.loc[df_temp['variable'] == 'טמפרטורת מינימום(C°)', 'variable'] = 'min temp' df_temp.loc[df_temp['variable'] == 'טמפרטורת מקסימום(C°)', 'variable'] = 'max temp' df_temp.loc[df_temp['variable'] == 'טמפרטורת מינימום ליד הקרקע(C°)', 'variable'] = 'ground temp' # Delete the record 'ground temp' (first make sure it's empty) assert(df_temp.loc[df_temp['variable'] == 'ground temp','value'].values == '-').all() df_temp = df_temp.drop(df_temp[df_temp['variable'] == 'ground temp'].index) # Convert to datetime df_temp['DateTime'] = pd.to_datetime(df_temp['DateTime'],infer_datetime_format=True) df_temp['value'] = df_temp['value'].apply(pd.to_numeric, errors='coerce') df_temp.tail()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  variable DateTime value     8638 min temp 2020-04-27 11.6   8640 max temp 2020-04-28 23.2   8641 min temp 2020-04-28 11.0   8643 max temp 2020-04-29 22.9   8644 min temp 2020-04-29 17.1     Let\u0026rsquo;s plot a histogram of the daily lows and highs, just to see that the dataset makes sense (it does):\ng = sns.FacetGrid(df_temp, hue='variable', height=6) g.map(sns.distplot, 'value', bins=30, hist=True, kde=False, hist_kws={\u0026quot;linewidth\u0026quot;: 3, \u0026quot;alpha\u0026quot;: 0.7}) g.add_legend(title=' ') g.axes[0,0].set_title(\u0026quot;Distribution of minimal and maximal temperatures\u0026quot;) g.axes[0,0].set_xlabel('Temperature [Celsius]');  To merge (fuse?) the datasets, we need to calculate an aggregate value for the pollutants for each day (because temperatures are measured only once a day). Averaging the measurements of each day is the simplest thing to do.\ndf_pol_day = df_aqm.groupby(df_aqm.index.date).mean() df_pol_day.index = pd.to_datetime(df_pol_day.index) df_max = df_temp.loc[df_temp['variable'] == 'max temp', ['DateTime', 'value']] df_max.rename(columns={'value': 'max temp'}, inplace=True) df_max.set_index('DateTime', inplace=True, drop=True) df_min = df_temp.loc[df_temp['variable'] == 'min temp', ['DateTime', 'value']] df_min.rename(columns={'value': 'min temp'}, inplace=True) df_min.set_index('DateTime', inplace=True, drop=True) df_pol_temp = df_pol_day.merge(right=df_max, how='inner', left_index=True, right_index=True) df_pol_temp = df_pol_temp.merge(right=df_min, how='inner', left_index=True, right_index=True) df_pol_temp.tail()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  SO2 Benzene PM2.5 PM10 CO NO2 NOX NO max temp min temp     2020-04-25 0.031802 0.049213 10.824653 NaN 0.279152 1.761702 1.509220 0.010284 22.3 17.1   2020-04-26 0.089753 0.036250 9.450694 NaN 0.295406 6.074823 7.617376 1.686170 23.0 16.1   2020-04-27 0.217314 0.079306 12.359028 NaN 0.310247 18.504255 28.706383 10.386525 23.0 11.6   2020-04-28 0.595760 0.091632 13.841319 NaN 0.332155 17.207801 26.422340 9.412057 23.2 11.0   2020-04-29 0.102827 0.020035 10.708333 NaN 0.260777 1.787943 1.271986 0.000000 22.9 17.1     sns.jointplot(x='min temp', y='NOX', data=df_pol_temp, kind=\u0026quot;reg\u0026quot;, stat_func=corr_coef); warnings.filterwarnings(action='default')  With a significant correlation of -0.58, the measured NOx values can be explained to some degree by the temperatures. It would be interesting to see if other meteorological factors, like humidity and wind, can explain even more of the NOx fluctuations.\nClosing remarks This notebook described a preliminary exploration of the air quality monitoring data in Haifa. It is by no means an exhaustive analysis, it is just a set of steps used to increase the understanding of the dataset. If you have any comment - an analysis that you think should be done, a peculiar result that should be examined or anything else - I would love to know!\nThis is not a conclusion, as it is only the start of the analysis. In the next chapter, I will evaluate the causal effect of Haifa\u0026rsquo;s new low emission zone using the synthetic control method. Stay tuned!\n","date":1592202350,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592202350,"objectID":"ff79bca93847a88a6743179ab8bf7fcd","permalink":"https://tom-beer.github.io/post/air-pollution-haifa/","publishdate":"2020-06-15T09:25:50+03:00","relpermalink":"/post/air-pollution-haifa/","section":"post","summary":"Exploratory data analysis","tags":[],"title":"Air Pollution in Haifa","type":"post"},{"authors":[],"categories":[],"content":" The full notebook and code can be found here\n Did you know that Doodle polls are significantly affected by social bias? It turns out that open polls, where voters can see previous votes and their votes are visible to others, have different voting profiles compared to hidden polls. In a recent paper, Zou et al. (2015) show that voters act stratigically in open polls, and this change in behaviour includes:\n Open polls have higher response rates for very popular time slots Open polls have higher response rates for very unpopular time slots The average reported availability is higher in open polls compared to hidden polls  The first point not surprising - responders vote more for the popular time slots either because these alternatives are simply better for most voters, or because they feel the need to be cooperative with the group\u0026rsquo;s choices. The second point however does not make sense at first - why would a repsonder vote for a time slot that is clearly not going to be selected? The authors suggest that this is because voters in open polls have an incentive to appear more cooperative:\n \u0026ldquo;There is an implicit social expectation that every responder will mark as many slots as possible. Therefore a responder in open polls may be motivated to mark more slots. In other words, bearing in mind that other participants can see her name and vote, a participant may want to approve more time slots to appear more cooperative even if they are less convenient for herself.\u0026rdquo;\n The third point is likely a consequence of the first two points.\nHere\u0026rsquo;s an example of a typical Doodle poll. It is also available here.\n  What\u0026rsquo;s wrong with that? One might think there\u0026rsquo;s nothing wrong that voters in open polls behave differently than in hidden polls. But actually this can have a substantial negative impact on the quality of the selected time: Alrawi et al. (2016) argue via a theoretical welfare analysis that when voters are being more generous with their time, this can lead to inferior time slots being selected.\nWhat can be done? While we can\u0026rsquo;t change human nature, we can come up with suggestions for models and algorithms that would cancel out the social bias. Since hidden polls have a higher chance of maximizing social utility, these algorithms should approximate what voting profile would have been recorded if the poll had been hidden. In this short project, a collaboration with Bar Eini-Porat, we propose a simple solution to this problem. This notebook desribes the data and simulation we rely on, details the design considerations we faced, and shows the results of our suggested approach.\nOutline The rest of this notebook is organized as follows. First the dataset of Doodle polls is presented. Then the process of simulating synthetic open polls from real hidden polls is described, followed by detail about the debiasing model. The notebook concludes with results and a discussion on limitations and future directions.\nDataset The data used for this project is a small slice of the dataset that was introduced in Reinecke et al. (2013). The original dataset, provided by Doodle, consisted of 1,771,430 anonymized date/time polls that were selected at random from a time period in mid-2011. Like Zou et al. (2015), we focus our analysis on polls with at least three participants, at least four time slots and only yes/no options. Unlike Zou et al. (2015), we analyze Doodle polls from all around the world, and use only hidden polls for our analysis. The obtained dataset consists of 104 polls and has a median of 9 responders and 10 time slots.\nSimulating open polls from hidden polls The foundamental problem of causal inference is what makes the problem of evaluating a proposed solution so difficult. Meaning we never have access to the two parallel worlds of both an open poll and a hidden poll describing the same scheduling problem with the same group of people. Following Alrawi et al. (2016), we treat the hidden polls of the dataset as ground truth: In a hidden poll each participant casts a vote based solely on their true availability, without introducing social considerations. This is the reason we chose to use only the hidden polls of the dataset.\nFrom each hidden poll we simulate an open poll using the following approach. We keep the number of participants and the number of time slots unchanged. The first voter (usually the poll initiator) is not affected by social considerations, so her approved time slots are unaltered in the simulated open poll compared to the original hidden poll. As for the next responders, their approved time slots may change according to the poll\u0026rsquo;s history up until their vote.\nIn more detail, the simulation process consists of a three-step mechanism:\n  Generate individual utilities\nAn individual utility $u_{ij}$ with $0 \\leq u_{ij} \\leq 1$ is assinged to each voter $v_i$ for each time slot $a_j$ indicating her valuation of attending the meeting or event during that time slot. These utilities are called \u0026lsquo;individual\u0026rsquo; as they are not affected by other voters. We assume that there is a global, fixed \u0026lsquo;yes-threshold\u0026rsquo; $\\tau_1$ that represents the utility beyond which a voter “typically” votes yes, so each voter $v_i$ is expected to say yes to a time slot $a_j$ when her utility for that slot satisfies $u_{ij} \\geq \\tau_1$. Then, in order to comply with the hidden poll, we generate individual utilities greater then $\\tau_1$ for the approved votes in the original hidden poll, and smaller then $\\tau_1$ for the disapproved votes:\n  $$u^{ind}(a) \\sim U[\\tau_1,1] \\text{ for } a \\in A_1$$\n$$u^{ind}(a) \\sim U[0,\\tau_1] \\text{ for } a \\notin A_1$$\nWhere $A_1$ is the set of approved time slots for a voter in the original hidden poll.\n Generate social utilities\nLike in the case of the individual utilities, social utilities are generated for each voter and time slot in each poll. The social utilities reflect the behavioral difference between hidden and open polls, i.e. they will be a function of the popularity of the time slot. Time slot popularity is defined as the ratio between approved votes to total number of votes.\nIn addition, although it was not discussed in Zou et al. (2015), we believe that the social utilities should also depend on the relative poll position, i.e. the fraction of the current voter to the total number of poll participants. For example, the second voter is less affected by social bias compared to the 10th voter. Since we do not have an accurate measure of the magnitude of the strategic behavior described in Zou et al. (2015), we set this magnitude so that it will comply with the increase in average availability in open polls compared to hidden polls (from 0.53 to 0.39, see section 2.3 of Zou et al. (2015)).\nApart from the magnitude of the social effect, we also need to set a functional form for it. We propose a sigmoidal-shaped curve for the social utility as function of popularity. This is an asymmetrical gain-gain function that outputs an unpopularity-gain for values below some neutral popularity and a popularity gain for values above it. Similarly, we propose a sigmoidal-shaped curve for the social utility as function of relative position.\nThe next figure illustrates these functions. The dashed vertical line denotes the neutral popularity, it need not be set at 0.5.\n    The social utility as function of both popularity and relative position is the product of the above two functions, scaled down by a factor representing the maximal possible social utility.\nGenerate approved time slots  Finally, an open poll is deterministically simulated from the hidden poll and generated utilities in accordance with the social voting model of Zou et al. (2015):\n$$\\text{Approve } { A_1^n,A_2^n \\cap Popular, A_2^n \\cap Unpopular }$$\nAccording to this model, there are three preference levels. A voter approves all of her most preferred slots, irrespective of their popularity. In addition, among the slots at her second preference level, the voter approves those slots that are either very popular or very unpopular. No slot of the third preference level is approved. $\\tau_1$ is the decision boundry between $A_1$ and $A_2$, and $\\tau_2$ is the decision boundry between $A_2$ and $A_3$.\nTherefore, approved votes in the synthetic open poll will be those exceeding the individual threshold (those approved in the original hidden poll), or those that, together with the social utilities, exceed the threshold: \\begin{align*} a: u^{ind}(a) \u0026gt; {\\tau_1} ; \\cup ; a: u^{ind}(a)+u^{soc}(a) \u0026gt; {\\tau_{1}} \\end{align*}\nAn important note is that the magnitude of the social effect should not exceed the difference between the thresholds of the preference groups: \\begin{align*} \\text{Maximal Social Utility} \\leq \\tau_1+\\tau_2 \\end{align*} This assures that time slots in the least preferred level ($A_3$) will not be approved, regardless of the social effect.\nDebiasing the open polls Now that we have simulated open polls, we can propose a method for circumventing the social effect. Our debiasing strategy is also a three-step process. First, we attempt to recover the social utilities that were in play for each voter and time slot. Then, we use these social utilities to weight the approved votes, with weight representing vote genuinity (a genuine vote is one that would have been approved irrespective of social considerations). Finally, we aggregate the weights to declare a winning time slot.\nIn more detail:\n  Estimate social utilities\nIn this step the social utility as function of popularity and relative position is estimated. We assume that both the functional form and social effect magnitude are known to us. This is a realistic scenario, as these quantities can be estimated efficiently from a large dataset. Computationally, this is equivalent to the first step of the simulation process. However, in the simulation process the utilities are calculated based on the ground-truth hidden poll, and here the social utilities are estimated based on the open poll history, which is itself biased from the ground-truth.\n  Calculate weights\nIn this step, we weight the voters according to the probability that their votes are genuine. Our weighting mechanism is tightly related to the estimated social utilities. It is defined as follows, where $\\hat{S_{ij}}$ are the estimated social utilities, $\\alpha$ is a hyperparameter and $W_{ij}$ are the weights: $$ W_{ij} = 1-\\alpha \\cdot \\hat{S_{ij}} \\text{ for } \\alpha \u0026lt; 1 $$\n  Declare winning time slot\nThe final step is to declare a winning time slot, aggregating information from the calculated weights. We want to minimize the risk that we falsely disapprove a vote that was actually approved in the hidden poll. We can fallback to the Doodle default algorithm (labelled DDA) and choose the most popular time slot whenever we are not confident with our approach.\nWe define the DDA score to be number of votes for each time slot. We define the debiased score to be the sum of weights for each time slot. The DDA winner and debiased winner are the maximal scoring time slot in each scoring regime.\nWe choose to output a winner according to the reweighting mechanism only in cases with relatively high confidence: We recommend the highest scoring alternative in our model only in cases witg substantial score difference. Our final winning candidate for the open poll is defined as:\n$\\text{if DDA score - debiased score} \\geq \\beta \\cdot \\text{debiased score:} $\n$\\text{ final winner} = \\text{DDA winner}$\n$\\text{else final winner} = \\text{debiased winner}$\n  Results The proposed method\u0026rsquo;s performance is evaluated in the following manner. For each poll, there are four possible scenarios:\n The winner in the original hidden poll matches both the winner proposed by DDA and the winner proposed by our method in the simulated open poll and. The winner in the original hidden poll does not match neither the winner proposed by DDA nor the winner proposed by our method in the simulated open poll and. The winner in the original hidden poll matches the winner proposed by DDA, but does not match the winner proposed by our method. The winner in the original hidden poll does not match the winner proposed by DDA, but matches the winner proposed by our method.  We count the number of polls in each of the above cases. We define the method\u0026rsquo;s benefit as the difference between the number of polls in case 4 and the number of polls in case 3. A positive benefit means that our method yields more good than harm.\nFollowing is a summary of obtained benefits as function of the number of voters and the number of time slots. It is apparent that the proposed method yields positive outcomes only in cases with a relatively high number of voters and time slots.\n  If the method is restricted to these cases only, we obtain the following statistics:\n  Which means that it is possible to devise a new voting rule that has a strictly positive benefit. Discussion, limitations and future work This notebook demonstrated a simple proof of concept to circumvent some of the adverse effects of the social voting phenomenon. Of course, further discussion about the work\u0026rsquo;s limitations is warranted.\nFirst, these results have limited statistical validity, as they are constrained by the small dataset available to us. Even though each hidden poll was used to construct many open polls, the effective sample size is still limited to the number of original hidden polls. To alleviate this obstacle, we have also implemented a completely synthetic simulation that does not require real hidden polls. But since these simulated hidden polls are of questionable quality compared to the real world distribution, we found it hard to draw inferences based on them instead of the real data.\nSecond, the whole simulation and analysis environment lacks in external validity. The predictive ability of retrospective analyses is inherently problematic, and to make valid inferences, a true randomized controlled experiment would be required.\nTo conclude, while further investigation is recommended, this work demonstrated the potential for a simple voting rule to increase overall social welfare.\nReferences Alrawi, D., Anthony, B. M., and Chung, C. (2016). How well do doodle polls do? In Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), volume 10046 LNCS, pages 3–23. Springer Verlag.\nReinecke, K., Nguyen, M. K., Bernstein, A., Naf, M., and Gajos, K. Z. (2013). Doodle around the world: Online scheduling behavior reflects cultural differences in time perception and group decision-making. In Proceedings of the ACM Conference on Computer Supported Cooperative Work, CSCW, pages 45–54.\nZou, J., Meir, R., and Parkes, D. C. (2015). Strategic voting behavior in doodle polls. In CSCW 2015 - Proceedings of the 2015 ACM International Conference on Computer-Supported Cooperative Work and Social Computing, pages 464–472. Association for Computing Machinery, Inc.\n","date":1585843702,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585843702,"objectID":"5094ff2ffcd44d7bbd3f0da3ec6451f1","permalink":"https://tom-beer.github.io/post/debiasing-doodle-polls/","publishdate":"2020-04-02T19:08:22+03:00","relpermalink":"/post/debiasing-doodle-polls/","section":"post","summary":"Uncovering users' true preferences","tags":[],"title":"Debiasing Doodle Polls","type":"post"}]